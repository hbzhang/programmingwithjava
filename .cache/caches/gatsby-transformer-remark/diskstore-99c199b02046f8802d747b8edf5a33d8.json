{"expireTime":9007200813318065000,"key":"transformer-remark-markdown-ast-628c6d40ad481c89e8320e15744152d5-gatsby-remark-imagesgatsby-remark-snippetsgatsby-remark-autolink-headersgatsby-remark-code-titlesgatsby-remark-prismjsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"link","url":"#basic-operations","title":null,"data":{"hProperties":{"aria-label":"basic operations permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Basic Operations","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":20,"offset":19},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":20,"offset":19},"indent":[]},"data":{"id":"basic-operations","htmlAttributes":{"id":"basic-operations"},"hProperties":{"id":"basic-operations"}}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#initilize-tensors","title":null,"data":{"hProperties":{"aria-label":"initilize tensors permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"initilize tensors","position":{"start":{"line":3,"column":5,"offset":25},"end":{"line":3,"column":22,"offset":42},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":21},"end":{"line":3,"column":23,"offset":43},"indent":[]},"data":{"id":"initilize-tensors","htmlAttributes":{"id":"initilize-tensors"},"hProperties":{"id":"initilize-tensors"}}},{"type":"paragraph","children":[{"type":"text","value":"(10,10) array with zero elements","position":{"start":{"line":5,"column":1,"offset":45},"end":{"line":5,"column":33,"offset":77},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":45},"end":{"line":5,"column":33,"offset":77},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Using python state\nx = tf.zeros([10, 10])\nx += 2  # This is equivalent to x = x + 2, which does not mutate the original\n        # value of x\nprint(x)</code></pre></div>","position":{"start":{"line":6,"column":1,"offset":78},"end":{"line":12,"column":4,"offset":237},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#a-simplest-training-using-mnist-datase","title":null,"data":{"hProperties":{"aria-label":"a simplest training using mnist datase permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"A simplest training using mnist datase","position":{"start":{"line":14,"column":5,"offset":243},"end":{"line":14,"column":43,"offset":281},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":239},"end":{"line":14,"column":43,"offset":281},"indent":[]},"data":{"id":"a-simplest-training-using-mnist-datase","htmlAttributes":{"id":"a-simplest-training-using-mnist-datase"},"hProperties":{"id":"a-simplest-training-using-mnist-datase"}}},{"type":"paragraph","children":[{"type":"text","value":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.optimizers import SGD","position":{"start":{"line":15,"column":1,"offset":282},"end":{"line":18,"column":33,"offset":415},"indent":[1,1,1]}}],"position":{"start":{"line":15,"column":1,"offset":282},"end":{"line":18,"column":33,"offset":415},"indent":[1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#generate-dummy-data","title":null,"data":{"hProperties":{"aria-label":"generate dummy data permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Generate dummy data","position":{"start":{"line":20,"column":3,"offset":419},"end":{"line":20,"column":22,"offset":438},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":417},"end":{"line":20,"column":22,"offset":438},"indent":[]},"data":{"id":"generate-dummy-data","htmlAttributes":{"id":"generate-dummy-data"},"hProperties":{"id":"generate-dummy-data"}}},{"type":"paragraph","children":[{"type":"text","value":"import numpy as np\nx","position":{"start":{"line":21,"column":1,"offset":439},"end":{"line":22,"column":2,"offset":459},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"train = np.random.random((1000, 20))\ny","position":{"start":{"line":22,"column":3,"offset":460},"end":{"line":23,"column":2,"offset":498},"indent":[1]}}],"position":{"start":{"line":22,"column":2,"offset":459},"end":{"line":23,"column":3,"offset":499},"indent":[1]}},{"type":"text","value":"train = keras.utils.to","position":{"start":{"line":23,"column":3,"offset":499},"end":{"line":23,"column":25,"offset":521},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"categorical(np.random.randint(10, size=(1000, 1)), num","position":{"start":{"line":23,"column":26,"offset":522},"end":{"line":23,"column":80,"offset":576},"indent":[]}}],"position":{"start":{"line":23,"column":25,"offset":521},"end":{"line":23,"column":81,"offset":577},"indent":[]}},{"type":"text","value":"classes=10)\nx","position":{"start":{"line":23,"column":81,"offset":577},"end":{"line":24,"column":2,"offset":590},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"test = np.random.random((100, 20))\ny","position":{"start":{"line":24,"column":3,"offset":591},"end":{"line":25,"column":2,"offset":627},"indent":[1]}}],"position":{"start":{"line":24,"column":2,"offset":590},"end":{"line":25,"column":3,"offset":628},"indent":[1]}},{"type":"text","value":"test = keras.utils.to","position":{"start":{"line":25,"column":3,"offset":628},"end":{"line":25,"column":24,"offset":649},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"categorical(np.random.randint(10, size=(100, 1)), num","position":{"start":{"line":25,"column":25,"offset":650},"end":{"line":25,"column":78,"offset":703},"indent":[]}}],"position":{"start":{"line":25,"column":24,"offset":649},"end":{"line":25,"column":79,"offset":704},"indent":[]}},{"type":"text","value":"classes=10)","position":{"start":{"line":25,"column":79,"offset":704},"end":{"line":25,"column":90,"offset":715},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":439},"end":{"line":25,"column":90,"offset":715},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"model = Sequential()","position":{"start":{"line":27,"column":1,"offset":717},"end":{"line":27,"column":21,"offset":737},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":717},"end":{"line":27,"column":21,"offset":737},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#dense64-is-a-fully-connected-layer-with-64-hidden-units","title":null,"data":{"hProperties":{"aria-label":"dense64 is a fully connected layer with 64 hidden units permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Dense(64) is a fully-connected layer with 64 hidden units.","position":{"start":{"line":28,"column":3,"offset":740},"end":{"line":28,"column":61,"offset":798},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":738},"end":{"line":28,"column":61,"offset":798},"indent":[]},"data":{"id":"dense64-is-a-fully-connected-layer-with-64-hidden-units","htmlAttributes":{"id":"dense64-is-a-fully-connected-layer-with-64-hidden-units"},"hProperties":{"id":"dense64-is-a-fully-connected-layer-with-64-hidden-units"}}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#in-the-first-layer-you-must-specify-the-expected-input-data-shape","title":null,"data":{"hProperties":{"aria-label":"in the first layer you must specify the expected input data shape permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"in the first layer, you must specify the expected input data shape:","position":{"start":{"line":29,"column":3,"offset":801},"end":{"line":29,"column":70,"offset":868},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":799},"end":{"line":29,"column":70,"offset":868},"indent":[]},"data":{"id":"in-the-first-layer-you-must-specify-the-expected-input-data-shape","htmlAttributes":{"id":"in-the-first-layer-you-must-specify-the-expected-input-data-shape"},"hProperties":{"id":"in-the-first-layer-you-must-specify-the-expected-input-data-shape"}}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#here-20-dimensional-vectors","title":null,"data":{"hProperties":{"aria-label":"here 20 dimensional vectors permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"here, 20-dimensional vectors.","position":{"start":{"line":30,"column":3,"offset":871},"end":{"line":30,"column":32,"offset":900},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":869},"end":{"line":30,"column":32,"offset":900},"indent":[]},"data":{"id":"here-20-dimensional-vectors","htmlAttributes":{"id":"here-20-dimensional-vectors"},"hProperties":{"id":"here-20-dimensional-vectors"}}},{"type":"paragraph","children":[{"type":"text","value":"model.add(Dense(64, activation='relu', input_dim=20))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","position":{"start":{"line":31,"column":1,"offset":901},"end":{"line":35,"column":43,"offset":1085},"indent":[1,1,1,1]}}],"position":{"start":{"line":31,"column":1,"offset":901},"end":{"line":35,"column":43,"offset":1085},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=sgd,\n              metrics=","position":{"start":{"line":37,"column":1,"offset":1087},"end":{"line":40,"column":23,"offset":1245},"indent":[1,1,1]}},{"type":"linkReference","identifier":"'accuracy'","referenceType":"shortcut","children":[{"type":"text","value":"'accuracy'","position":{"start":{"line":40,"column":24,"offset":1246},"end":{"line":40,"column":34,"offset":1256},"indent":[]}}],"position":{"start":{"line":40,"column":23,"offset":1245},"end":{"line":40,"column":35,"offset":1257},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":40,"column":35,"offset":1257},"end":{"line":40,"column":36,"offset":1258},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1087},"end":{"line":40,"column":36,"offset":1258},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"model.fit(x","position":{"start":{"line":42,"column":1,"offset":1260},"end":{"line":42,"column":12,"offset":1271},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"train, y","position":{"start":{"line":42,"column":13,"offset":1272},"end":{"line":42,"column":21,"offset":1280},"indent":[]}}],"position":{"start":{"line":42,"column":12,"offset":1271},"end":{"line":42,"column":22,"offset":1281},"indent":[]}},{"type":"text","value":"train,\n          epochs=20,\n          batch","position":{"start":{"line":42,"column":22,"offset":1281},"end":{"line":44,"column":16,"offset":1324},"indent":[1,1]}},{"type":"emphasis","children":[{"type":"text","value":"size=128)\nscore = model.evaluate(x","position":{"start":{"line":44,"column":17,"offset":1325},"end":{"line":45,"column":25,"offset":1359},"indent":[1]}}],"position":{"start":{"line":44,"column":16,"offset":1324},"end":{"line":45,"column":26,"offset":1360},"indent":[1]}},{"type":"text","value":"test, y","position":{"start":{"line":45,"column":26,"offset":1360},"end":{"line":45,"column":33,"offset":1367},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"test, batch","position":{"start":{"line":45,"column":34,"offset":1368},"end":{"line":45,"column":45,"offset":1379},"indent":[]}}],"position":{"start":{"line":45,"column":33,"offset":1367},"end":{"line":45,"column":46,"offset":1380},"indent":[]}},{"type":"text","value":"size=128)","position":{"start":{"line":45,"column":46,"offset":1380},"end":{"line":45,"column":55,"offset":1389},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1260},"end":{"line":45,"column":55,"offset":1389},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#a-simplest-training-using-mnist-dataset","title":null,"data":{"hProperties":{"aria-label":"a simplest training using mnist dataset permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"A simplest training using mnist dataset","position":{"start":{"line":51,"column":5,"offset":1399},"end":{"line":51,"column":44,"offset":1438},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1395},"end":{"line":51,"column":44,"offset":1438},"indent":[]},"data":{"id":"a-simplest-training-using-mnist-dataset","htmlAttributes":{"id":"a-simplest-training-using-mnist-dataset"},"hProperties":{"id":"a-simplest-training-using-mnist-dataset"}}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import tensorflow as tf\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(512, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\nmodel.compile(optimizer=&#39;adam&#39;,\n              loss=&#39;sparse_categorical_crossentropy&#39;,\n              metrics=[&#39;accuracy&#39;])\n\nmodel.fit(x_train, y_train, epochs=5)\nmodel.evaluate(x_test, y_test)</code></pre></div>","position":{"start":{"line":53,"column":1,"offset":1440},"end":{"line":72,"column":4,"offset":2031},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","value":"<a class=\"sbox\" href=\"https://www.digitalocean.com/docs/one-clicks/ghost/\" target=\"_blank\" rel=\"noopener\">\n    <div class=\"sbox-image\">\n        <svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"65.2 173.5 180 180\"><style>.st0{fill:#0080ff}</style><g id=\"XMLID_229_\"><g id=\"XMLID_690_\"><g id=\"XMLID_691_\"><g id=\"XMLID_44_\"><g id=\"XMLID_48_\"><path id=\"XMLID_49_\" class=\"st0\" d=\"M155.2 351.7v-34.2c36.2 0 64.3-35.9 50.4-74-5.1-14.1-16.4-25.4-30.5-30.5-38.1-13.8-74 14.2-74 50.4H67c0-57.7 55.8-102.7 116.3-83.8 26.4 8.3 47.5 29.3 55.7 55.7 18.9 60.6-26 116.4-83.8 116.4z\"/></g><path id=\"XMLID_47_\" class=\"st0\" d=\"M155.3 317.6h-34v-34h34z\"/><path id=\"XMLID_46_\" class=\"st0\" d=\"M121.3 343.8H95.1v-26.2h26.2z\"/><path id=\"XMLID_45_\" class=\"st0\" d=\"M95.1 317.6H73.2v-21.9h21.9v21.9z\"/></g></g></g></g></svg>\n    </div>\n    <div class=\"sbox-content\">\n        <h4> Dense layer is the layer refering to every node of neuron is connected to a previous layer. &#x1F449;</h4>\n        <h4> Dense(512) is a fully-connected layer with 512 hidden units. &#x1F604; </h4>\n        <img src=\"https://www.researchgate.net/profile/Igor_Gilitschenski/publication/311920717/figure/fig2/AS:617625239425024@1524264740078/Sample-dense-neural-network-with-2-fully-connected-layers-2-dropout-layers-and-a_Q320.jpg\" alt=\"Smiley face\" height=\"142\" width=\"142\">    \n    </div>\n</a>","position":{"start":{"line":74,"column":1,"offset":2033},"end":{"line":83,"column":5,"offset":3377},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","url":"#a-more--complete-training-using-mnist-dataset","title":null,"data":{"hProperties":{"aria-label":"a more  complete training using mnist dataset permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"A more  complete training using mnist dataset","position":{"start":{"line":86,"column":5,"offset":3384},"end":{"line":86,"column":50,"offset":3429},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3380},"end":{"line":86,"column":50,"offset":3429},"indent":[]},"data":{"id":"a-more--complete-training-using-mnist-dataset","htmlAttributes":{"id":"a-more--complete-training-using-mnist-dataset"},"hProperties":{"id":"a-more--complete-training-using-mnist-dataset"}}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from __future__ import print_function\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K\n\nbatch_size = 128\nnum_classes = 10\nepochs = 12\n\n# input image dimensions\nimg_rows, img_cols = 28, 28\n\n# the data, split between train and test sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\nif K.image_data_format() == &#39;channels_first&#39;:\n    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)\n\nx_train = x_train.astype(&#39;float32&#39;)\nx_test = x_test.astype(&#39;float32&#39;)\nx_train /= 255\nx_test /= 255\nprint(&#39;x_train shape:&#39;, x_train.shape)\nprint(x_train.shape[0], &#39;train samples&#39;)\nprint(x_test.shape[0], &#39;test samples&#39;)\n\n# convert class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation=&#39;relu&#39;,\n                 input_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation=&#39;relu&#39;))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=&#39;relu&#39;))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation=&#39;softmax&#39;))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=[&#39;accuracy&#39;])\n\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint(&#39;Test loss:&#39;, score[0])\nprint(&#39;Test accuracy:&#39;, score[1])</code></pre></div>","position":{"start":{"line":88,"column":1,"offset":3431},"end":{"line":153,"column":4,"offset":5500},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":155,"column":1,"offset":5502}}}}