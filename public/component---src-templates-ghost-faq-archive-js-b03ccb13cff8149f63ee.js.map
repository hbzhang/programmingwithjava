{"version":3,"sources":["webpack:///./src/templates/ghost/faq-archive.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js","webpack:///./src/utils/getTagsforPostCollection.js","webpack:///./src/components/faq/FAQLink.js","webpack:///./src/components/faq/FAQTagList.js","webpack:///./src/components/faq/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","tagsQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_components_common_layout__WEBPACK_IMPORTED_MODULE_3__","_styles_spirit_styles__WEBPACK_IMPORTED_MODULE_4__","_components_common_meta__WEBPACK_IMPORTED_MODULE_5__","_components_faq__WEBPACK_IMPORTED_MODULE_6__","FAQTags","_ref","data","location","pageContext","posts","allGhostPost","edges","tagURL","tagName","tagDescription","tagImage","tagMetaTitle","tagMetaDescription","section","title","description","imageUrl","getMetaImageUrls","a","createElement","Fragment","type","image","headerDividerStyle","className","Spirit","page","xl","h4","to","map","_ref2","node","key","id","post","propTypes","PropTypes","shape","site","siteMetadata","siteUrl","string","isRequired","object","pathname","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","name","sameAsArray","length","join","profile_image","defaultProps","bool","ImageMeta","react_default","Helmet_default","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","meta_title","meta_description","excerpt","rel","href","og_title","og_description","published_at","updated_at","keyword","i","twitter_title","twitter_description","meta_ImageMeta","tags","arrayOf","ArticleMetaMD","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","url","resolve","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","SITEURL","process","imageUrls","faq","integrations","tutorials","default","proptypes","meta_MetaData","meta_getMetaImageUrls","getTagsforPostCollection","linkPrefix","exec","forEach","flattenDeep","link","sortedUniqBy","sortBy","FAQLink","children","substring","gatsby_browser_entry","small","FAQTagList","unshift","h5","dynamicClass","data-cy","FAQTagsQuery","props","query","render","FAQTagList_FAQTagList","Object","assign","_4095130143","faq_FAQLink","faq_FAQTagList"],"mappings":"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","file":"component---src-templates-ghost-faq-archive-js-b03ccb13cff8149f63ee.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\n\nimport { Layout } from '../../components/common/layout'\nimport { Spirit } from '../../styles/spirit-styles'\nimport { MetaData, getMetaImageUrls } from '../../components/common/meta'\nimport { FAQLink, FAQTagList } from '../../components/faq'\n\nconst FAQTags = ({ data, location, pageContext }) => {\n    const posts = data.allGhostPost.edges\n    const { tagURL, tagName, tagDescription, tagImage, tagMetaTitle, tagMetaDescription, section } = pageContext\n\n    // Add meta title and description or this page here to overwrite the site meta data as set in the config\n    const title = tagMetaTitle || `FAQ - ${tagName} - Ghost`\n    const description = tagMetaDescription || tagDescription || ``\n    const imageUrl = tagImage || getMetaImageUrls(section)\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"series\"\n                title={title}\n                description={description}\n                image={imageUrl}\n            />\n            <Layout headerDividerStyle=\"shadow\">\n                <div className=\"bg-faq bb b--whitegrey\">\n                    <div className={`${Spirit.page.xl} pt-vw7 pt-vw1-ns pb-vw1`}>\n                        <h1 className={`${Spirit.h4} white`}>\n                            <Link to=\"/faq/\" className=\"link dim white fw3\">Frequently Asked Questions</Link>\n                            <span className=\"white titleslash-white pl4 ml4 relative\">\n                                <Link to={tagURL} className=\"link dim white\">{tagName}</Link>\n                            </span>\n                        </h1>\n                    </div>\n                </div>\n                <div className={`${Spirit.page.xl} grid-12 pb5` }>\n                    <div className=\"bg-white shadow-2 br4 mt10 pa5 pa15-ns pt10-ns pb12-ns col-12 col-8-ns\">\n                        {posts.map(({ node }) => (\n                            <FAQLink key={node.id} post={node} section={section}/>\n                        ))}\n                    </div>\n                    <div className=\"col-12 col-4-ns pa5 pa15-ns pt10-ns mt11-ns\">\n                        <FAQTagList location={location} />\n                    </div>\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nFAQTags.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.shape({\n        section: PropTypes.string.isRequired,\n        tagName: PropTypes.string.isRequired,\n        tagURL: PropTypes.string.isRequired,\n        tagDescription: PropTypes.string,\n        tagMetaDescription: PropTypes.string,\n        tagMetaTitle: PropTypes.string,\n        tagImage: PropTypes.string,\n    }).isRequired,\n}\n\nexport default FAQTags\n\nexport const tagsQuery = graphql`\n    query($tagSlug: String!) {\n        site {\n            ...SiteMetaFields\n        }\n        allGhostPost(\n            sort: { order: DESC, fields: [published_at] },\n            limit: 100,\n            filter: {tags: {elemMatch: {slug: {eq: $tagSlug}}}}\n        ) {\n            edges {\n                node {\n                    ...GhostPostListFields\n                }\n            }\n        }\n    }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta property=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.ghost.org`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n","import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\n/* getTagsforPostCollection\n* Takes a Ghost post object and a link prefix and returns the used tags\n* array for a passed post collection. The tags will not contain internal tags,\n* duplicates, and are sorted ascending by name. The tags array can be used to\n* programmatically generate a tags cloud or menu.\n*/\nexport const getTagsforPostCollection = function getTagsforPostCollection(posts, linkPrefix) {\n    let tags = []\n    // remove any added `/`, as we add them later again\n    linkPrefix = /^(?:\\/?)([a-zA-Z\\d-]*)(?:\\/?)/i.exec(linkPrefix)[1]\n\n    _.forEach(posts, ({ node }) => {\n        const publicTags = tagsHelper(node, { visibility: `public`, fn: tag => tag })\n        tags.push(publicTags)\n    })\n\n    tags = _.flattenDeep(tags)\n\n    _.map(tags, (tag) => {\n        tag.link = linkPrefix ? `/${linkPrefix}/${tag.slug}/` : `/${tag.slug}/`\n    })\n\n    return _.sortedUniqBy(_.sortBy(_.flattenDeep(tags), `name`), `name`)\n}\n\ngetTagsforPostCollection.proptypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: PropTypes.shape({\n                tags: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        name: PropTypes.string.isRequired,\n                        slug: PropTypes.string.isRequired,\n                    })\n                ).isRequired,\n            }).isRequired,\n        })).isRequired,\n    linkPrefix: PropTypes.string,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport { Spirit } from '../../styles/spirit-styles'\n\nconst FAQLink = ({ post, section, title, children, to, className }) => {\n    const url = post ? `/${section}/${post.slug}/` : to\n    title = post ? post.title : title\n    const excerpt = post ?\n        post.excerpt.length > 200 ? `${post.excerpt.substring(0, 200)}...` : post.excerpt\n        : children\n\n    return (\n        <Link to={url} className={className}>\n            <h4 to={url} className={`${Spirit.excerpt} link darkgrey fw5`}>{title} &raquo;</h4>\n            {excerpt && <p className={`${Spirit.small} ma0 f8 lh-copy middarkgrey mb6`}>{excerpt}</p>}\n        </Link>\n    )\n}\nFAQLink.defaultProps = {\n    className: `f5 db tdn mb6 faq-question bb b--whitegrey`,\n    section: `faq`,\n}\n\nFAQLink.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        slug: PropTypes.string,\n        excerpt: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    children: PropTypes.node,\n    to: PropTypes.string,\n    className: PropTypes.string,\n}\n\nexport default FAQLink\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, StaticQuery, graphql } from 'gatsby'\n\nimport { Spirit } from '../../styles/spirit-styles'\nimport { getTagsforPostCollection } from '../../utils/getTagsforPostCollection'\n\nconst FAQTagList = ({ data, location }) => {\n    const tags = getTagsforPostCollection(data.allGhostPost.edges, `faq`)\n\n    // Add a default tag for \"All\" at first place, which\n    // links back to the general faq page\n    tags.unshift({\n        name: `All`,\n        slug: `all`,\n        link: `/faq/`,\n    })\n\n    return (\n            <>\n                <h4 className={`${Spirit.h5} midgrey` }>FAQ topics</h4>\n                <div className=\"mt4\">\n                    {tags.map((tag, i) => {\n                        const dynamicClass = location.pathname === tag.link ? `bg-faq-color white fw5` : `bg-whitegrey middarkgrey hover-bg-lightgrey-l2`\n\n                        return (\n                            <Link\n                                to={tag.link}\n                                className={`${dynamicClass} dib pa2 pl3 pr3 br3 mb3 mr3 f8 link`}\n                                key={i}\n                                data-cy={`${tag.slug}-filter`}\n                            >\n                                {tag.name}\n                            </Link>\n                        )\n                    })}\n                </div>\n            </>\n    )\n}\n\nFAQTagList.propTypes = {\n    location: PropTypes.object.isRequired,\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.shape({\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    post: PropTypes.shape({\n                        tag: PropTypes.arrayOf(\n                            PropTypes.shape({\n                                name: PropTypes.string,\n                                slug: PropTypes.string,\n                            })\n                        ),\n                    }),\n                }).isRequired,\n            ).isRequired,\n        }).isRequired,\n    }).isRequired,\n}\n\nconst FAQTagsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostFAQTagsQuery {\n                allGhostPost(\n                    sort: { order: ASC, fields: [published_at] },\n                    limit: 100,\n                    filter: {tags: {elemMatch: {slug: {eq: \"hash-faq\"}}}}\n                ) {\n                edges {\n                    node {\n                    ...GhostTagListFields\n                    }\n                }\n                }\n            }\n        `}\n        render={data => <FAQTagList data={data} {...props} />}\n    />\n)\nexport default FAQTagsQuery\n","export { default as FAQLink } from './FAQLink'\nexport { default as FAQTagList } from './FAQTagList'\n"],"sourceRoot":""}