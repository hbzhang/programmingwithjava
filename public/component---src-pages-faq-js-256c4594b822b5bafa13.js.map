{"version":3,"sources":["webpack:///./src/pages/faq.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js","webpack:///./src/utils/getTagsforPostCollection.js","webpack:///./src/components/faq/FAQLink.js","webpack:///./src/components/faq/FAQTagList.js","webpack:///./src/components/faq/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_styles_spirit_styles__WEBPACK_IMPORTED_MODULE_2__","_components_faq__WEBPACK_IMPORTED_MODULE_3__","_components_common_layout__WEBPACK_IMPORTED_MODULE_4__","_components_common_meta__WEBPACK_IMPORTED_MODULE_5__","FAQPage","_ref","data","location","imageUrl","getMetaImageUrls","a","createElement","Fragment","type","title","description","image","headerDividerStyle","className","Spirit","page","xl","h4","to","propTypes","PropTypes","shape","site","siteMetadata","siteUrl","string","isRequired","pathname","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","name","sameAsArray","length","join","profile_image","defaultProps","bool","ImageMeta","react_default","Helmet_default","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","meta_title","meta_description","excerpt","rel","href","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","meta_ImageMeta","object","tags","arrayOf","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","_ref2","url","resolve","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","SITEURL","process","imageUrls","faq","integrations","tutorials","default","section","proptypes","meta_MetaData","meta_getMetaImageUrls","getTagsforPostCollection","posts","linkPrefix","exec","forEach","node","flattenDeep","link","sortedUniqBy","sortBy","FAQLink","children","substring","gatsby_browser_entry","small","FAQTagList","allGhostPost","edges","unshift","h5","dynamicClass","data-cy","FAQTagsQuery","props","query","render","FAQTagList_FAQTagList","Object","assign","_4095130143","faq_FAQLink","faq_FAQTagList"],"mappings":"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","file":"component---src-pages-faq-js-256c4594b822b5bafa13.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Spirit } from '../styles/spirit-styles'\nimport { FAQTagList, FAQLink } from '../components/faq'\nimport { Layout } from '../components/common/layout'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\n\nconst FAQPage = ({ data, location }) => {\n    // Add meta title and description for this page here to overwrite the site meta data as set in the config\n    const title = `FAQ - Ghost`\n    const description = `Answers to our most popular questions: billing, hosting, troubleshooting and more.`\n    const imageUrl = getMetaImageUrls(`faq`)\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"website\"\n                title={title}\n                description={description}\n                image={imageUrl}\n            />\n            <Layout headerDividerStyle=\"shadow\">\n                <div className=\"bg-faq bb b--whitegrey\">\n                    <div className={`${Spirit.page.xl} pt-vw7 pt-vw1-ns pb-vw1`}>\n                        <h1 className={`${Spirit.h4} white`}>Frequently Asked Questions</h1>\n                    </div>\n                </div>\n                <div className={`${Spirit.page.xl} grid-12`}>\n                    <div className=\"bg-white shadow-2 br4 mt5 mt10-ns pa5 pa15-ns pt10-ns pb12-ns col-12 col-8-ns\">\n                        <FAQLink to=\"/faq/using-custom-domains/\" title=\"Using custom domains\">\n                            If you would like to make your site memorable and easy to find with a branded custom domain, then you can map any domain you own directly to your Ghost(Pro) publication.\n                        </FAQLink>\n\n                        <FAQLink to=\"/faq/forgot-password/\" title=\"How do I reset my password?\">\n                            In Ghost, each publication user has their own account details and password which can be reset or changed. Read more if you forgot your password or need to reset it!\n                        </FAQLink>\n\n                        <FAQLink to=\"/faq/using-the-editor/\" title=\"Using the editor\">\n                            Ghost has a powerful visual editor with familiar formatting options, with full support for dynamic content, allowing you to add images, galleries, videos, embeds and code!\n                        </FAQLink>\n\n                        <FAQLink to=\"/faq/publishing-options/\" title=\"Publishing options\">\n                            The post settings menu within the editor allows you to fully optimise your content. This is where you can add tags and authors, feature a post, or turn a post into a page.\n                        </FAQLink>\n\n                        <FAQLink to=\"/faq/managing-your-team/\" title=\"Managing your team\">\n                            Ghost has a number of different user roles and permissions for your team for effective collaboration and publication management. Read more more about inviting your team to Ghost!\n                        </FAQLink>\n\n                        <FAQLink to=\"/faq/the-importer/\" title=\"Imports & exports\">\n                            Publishing with Ghost gives you full ownership and access to your content and data, with sensible JSON imports and exports available at any time. Find out more about imports and migrations!\n                        </FAQLink>\n\n                        <FAQLink to=\"/faq/design-settings/\" title=\"Design settings\">\n                            Adding some design touches to your Ghost publication can be done from the Admin page when logged in to your publication. From here you can add navigation and upload a custom theme.\n                        </FAQLink>\n\n                        <FAQLink to=\"/faq/analytics/\" title=\"How can I track how many views my site is getting?\">\n                            Ghost integrates seamlessly with all 3rd party analytics tools out there, and it takes just a few minutes to set up using the code injection feature in your publication settings.\n                        </FAQLink>\n                    </div>\n                    <div className=\"col-12 col-4-ns pa5 pa15-ns pt10-ns mt11-ns \">\n                        <FAQTagList location={location} />\n                    </div>\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nFAQPage.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default FAQPage\n\nexport const pageQuery = graphql`\n  query GhostFAQQuery {\n    site {\n        ...SiteMetaFields\n    }\n  }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta property=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.ghost.org`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n","import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\n/* getTagsforPostCollection\n* Takes a Ghost post object and a link prefix and returns the used tags\n* array for a passed post collection. The tags will not contain internal tags,\n* duplicates, and are sorted ascending by name. The tags array can be used to\n* programmatically generate a tags cloud or menu.\n*/\nexport const getTagsforPostCollection = function getTagsforPostCollection(posts, linkPrefix) {\n    let tags = []\n    // remove any added `/`, as we add them later again\n    linkPrefix = /^(?:\\/?)([a-zA-Z\\d-]*)(?:\\/?)/i.exec(linkPrefix)[1]\n\n    _.forEach(posts, ({ node }) => {\n        const publicTags = tagsHelper(node, { visibility: `public`, fn: tag => tag })\n        tags.push(publicTags)\n    })\n\n    tags = _.flattenDeep(tags)\n\n    _.map(tags, (tag) => {\n        tag.link = linkPrefix ? `/${linkPrefix}/${tag.slug}/` : `/${tag.slug}/`\n    })\n\n    return _.sortedUniqBy(_.sortBy(_.flattenDeep(tags), `name`), `name`)\n}\n\ngetTagsforPostCollection.proptypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: PropTypes.shape({\n                tags: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        name: PropTypes.string.isRequired,\n                        slug: PropTypes.string.isRequired,\n                    })\n                ).isRequired,\n            }).isRequired,\n        })).isRequired,\n    linkPrefix: PropTypes.string,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport { Spirit } from '../../styles/spirit-styles'\n\nconst FAQLink = ({ post, section, title, children, to, className }) => {\n    const url = post ? `/${section}/${post.slug}/` : to\n    title = post ? post.title : title\n    const excerpt = post ?\n        post.excerpt.length > 200 ? `${post.excerpt.substring(0, 200)}...` : post.excerpt\n        : children\n\n    return (\n        <Link to={url} className={className}>\n            <h4 to={url} className={`${Spirit.excerpt} link darkgrey fw5`}>{title} &raquo;</h4>\n            {excerpt && <p className={`${Spirit.small} ma0 f8 lh-copy middarkgrey mb6`}>{excerpt}</p>}\n        </Link>\n    )\n}\nFAQLink.defaultProps = {\n    className: `f5 db tdn mb6 faq-question bb b--whitegrey`,\n    section: `faq`,\n}\n\nFAQLink.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        slug: PropTypes.string,\n        excerpt: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    children: PropTypes.node,\n    to: PropTypes.string,\n    className: PropTypes.string,\n}\n\nexport default FAQLink\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, StaticQuery, graphql } from 'gatsby'\n\nimport { Spirit } from '../../styles/spirit-styles'\nimport { getTagsforPostCollection } from '../../utils/getTagsforPostCollection'\n\nconst FAQTagList = ({ data, location }) => {\n    const tags = getTagsforPostCollection(data.allGhostPost.edges, `faq`)\n\n    // Add a default tag for \"All\" at first place, which\n    // links back to the general faq page\n    tags.unshift({\n        name: `All`,\n        slug: `all`,\n        link: `/faq/`,\n    })\n\n    return (\n            <>\n                <h4 className={`${Spirit.h5} midgrey` }>FAQ topics</h4>\n                <div className=\"mt4\">\n                    {tags.map((tag, i) => {\n                        const dynamicClass = location.pathname === tag.link ? `bg-faq-color white fw5` : `bg-whitegrey middarkgrey hover-bg-lightgrey-l2`\n\n                        return (\n                            <Link\n                                to={tag.link}\n                                className={`${dynamicClass} dib pa2 pl3 pr3 br3 mb3 mr3 f8 link`}\n                                key={i}\n                                data-cy={`${tag.slug}-filter`}\n                            >\n                                {tag.name}\n                            </Link>\n                        )\n                    })}\n                </div>\n            </>\n    )\n}\n\nFAQTagList.propTypes = {\n    location: PropTypes.object.isRequired,\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.shape({\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    post: PropTypes.shape({\n                        tag: PropTypes.arrayOf(\n                            PropTypes.shape({\n                                name: PropTypes.string,\n                                slug: PropTypes.string,\n                            })\n                        ),\n                    }),\n                }).isRequired,\n            ).isRequired,\n        }).isRequired,\n    }).isRequired,\n}\n\nconst FAQTagsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostFAQTagsQuery {\n                allGhostPost(\n                    sort: { order: ASC, fields: [published_at] },\n                    limit: 100,\n                    filter: {tags: {elemMatch: {slug: {eq: \"hash-faq\"}}}}\n                ) {\n                edges {\n                    node {\n                    ...GhostTagListFields\n                    }\n                }\n                }\n            }\n        `}\n        render={data => <FAQTagList data={data} {...props} />}\n    />\n)\nexport default FAQTagsQuery\n","export { default as FAQLink } from './FAQLink'\nexport { default as FAQTagList } from './FAQTagList'\n"],"sourceRoot":""}