{"version":3,"sources":["webpack:///./src/templates/ghost/integration-archive.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js","webpack:///./src/utils/getTagsforPostCollection.js","webpack:///./src/components/integrations/IntegrationBox.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js","webpack:///./src/components/integrations/integration-search/IntegrationResults.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationIndex.js","webpack:///./src/components/integrations/IntegrationsTagList.js","webpack:///./src/components/integrations/IntegrationsContent.js","webpack:///./src/components/integrations/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","tagsQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_components_integrations__WEBPACK_IMPORTED_MODULE_2__","_components_common_meta__WEBPACK_IMPORTED_MODULE_3__","IntegrationsTags","_ref","data","location","pageContext","posts","allGhostPost","edges","tagName","tagDescription","tagImage","tagMetaTitle","tagMetaDescription","section","title","description","imageUrl","getMetaImageUrls","a","createElement","Fragment","type","site","siteMetadata","image","propTypes","PropTypes","shape","siteUrl","string","isRequired","object","pathname","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","name","sameAsArray","length","join","profile_image","defaultProps","bool","ImageMeta","react_default","Helmet_default","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","meta_title","meta_description","excerpt","rel","href","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","meta_ImageMeta","tags","arrayOf","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","_ref2","url","resolve","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","SITEURL","process","imageUrls","faq","integrations","tutorials","default","proptypes","meta_MetaData","meta_getMetaImageUrls","getTagsforPostCollection","linkPrefix","exec","forEach","node","flattenDeep","link","sortedUniqBy","sortBy","IntegrationBox","hit","hitOnCurrentSite","siteUrlRegex","RegExp","match","replace","optimisedImg","common","to","className","elevation","radius","style","objectFit","src","alt","connectHits","Object","createConnector","displayName","getProvidedProps","props","searchState","searchResults","results","indexUtils","this","context","hits","hitsWithPositions","utils","hitsPerPage","page","queryID","getSearchParameters","searchParameters","IntegrationResults","integrations_IntegrationBox","objectID","IntegrationResultsList","getCurrentRefinement","currentRefinement","_refine","nextRefinement","nextValue","defineProperty","connectSearchBox","defaultRefinement","prop_types_default","isSearchStalled","refine","cleanUp","_cleanUp","setQuery","getMetadata","_this","id","index","items","label","concat","value","nextState","IntegrationSearch","_React$Component","call","state","currentInput","showResetButton","handleChange","bind","assertThisInitialized_default","setInput","resetSearch","toggleResetButton","e","setState","val","searchActive","target","render","htmlFor","placeholder","autoComplete","onChange","onClick","React","Component","func","IntegrationSearchBox","IntegrationIndex","children","Index","indexName","IntegrationsTagList","activeLocation","unshift","data-cy","dynamicClass","gatsby_browser_entry","IntegrationTagsQuery","query","IntegrationsTagList_IntegrationsTagList","assign","_420472741","IntegrationsContent","activeSorting","searchSwitch","field","firstSortField","secondSortField","sortedPosts","layout","headerDividerStyle","header","theme","Spirit","sectionHeading","sectionSubHeading","integration_search_IntegrationSearchBox","integration_search_IntegrationIndex","xl","integrations_IntegrationsTagList","integration_search_IntegrationResults","array","integrations_IntegrationsContent"],"mappings":"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","file":"component---src-templates-ghost-integration-archive-js-0a26aa4b8c69c9a5348a.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { IntegrationsContent } from '../../components/integrations'\nimport { MetaData, getMetaImageUrls } from '../../components/common/meta'\n\nconst IntegrationsTags = ({ data, location, pageContext }) => {\n    const posts = data.allGhostPost.edges\n    const { tagName, tagDescription, tagImage, tagMetaTitle, tagMetaDescription, section } = pageContext\n\n    // Add meta title and description or this page here to overwrite the site meta data as set in the config\n    const title = tagMetaTitle || `Integrations - ${tagName} - Ghost`\n    const description = tagMetaDescription || tagDescription || ``\n    const imageUrl = tagImage || getMetaImageUrls(section)\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"series\"\n                title={title || data.site.siteMetadata.title}\n                description={description || data.site.siteMetadata.description}\n                image={imageUrl}\n            />\n            <IntegrationsContent\n                posts={posts}\n                location={location}\n            />\n        </>\n    )\n}\n\nIntegrationsTags.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.shape({\n        section: PropTypes.string.isRequired,\n        tagName: PropTypes.string.isRequired,\n        tagDescription: PropTypes.string,\n        tagMetaDescription: PropTypes.string,\n        tagMetaTitle: PropTypes.string,\n        tagImage: PropTypes.string,\n    }).isRequired,\n}\n\nexport default IntegrationsTags\n\nexport const tagsQuery = graphql`\n    query($tagSlug: String!) {\n        site {\n            ...SiteMetaFields\n        }\n        allGhostPost(\n            sort: { order: ASC, fields: [published_at] },\n            limit: 100,\n            filter: {tags: {elemMatch: {slug: {eq: $tagSlug}}}}\n        ) {\n            edges {\n                node {\n                    ...GhostPostListFields\n                }\n            }\n        }\n    }\n`\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://ghost.org/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport ImageMeta from './ImageMeta'\nimport { getMetaImageUrls } from '.'\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta property=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://ghost.org/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.ghost.org/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nimport ImageMeta from './ImageMeta'\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={image} />\n        </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.ghost.org/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types'\nimport url from 'url'\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.ghost.org`\n\nconst imageUrls = {\n    faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/Ghost-Docs.jpg`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n","import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\n/* getTagsforPostCollection\n* Takes a Ghost post object and a link prefix and returns the used tags\n* array for a passed post collection. The tags will not contain internal tags,\n* duplicates, and are sorted ascending by name. The tags array can be used to\n* programmatically generate a tags cloud or menu.\n*/\nexport const getTagsforPostCollection = function getTagsforPostCollection(posts, linkPrefix) {\n    let tags = []\n    // remove any added `/`, as we add them later again\n    linkPrefix = /^(?:\\/?)([a-zA-Z\\d-]*)(?:\\/?)/i.exec(linkPrefix)[1]\n\n    _.forEach(posts, ({ node }) => {\n        const publicTags = tagsHelper(node, { visibility: `public`, fn: tag => tag })\n        tags.push(publicTags)\n    })\n\n    tags = _.flattenDeep(tags)\n\n    _.map(tags, (tag) => {\n        tag.link = linkPrefix ? `/${linkPrefix}/${tag.slug}/` : `/${tag.slug}/`\n    })\n\n    return _.sortedUniqBy(_.sortBy(_.flattenDeep(tags), `name`), `name`)\n}\n\ngetTagsforPostCollection.proptypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: PropTypes.shape({\n                tags: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        name: PropTypes.string.isRequired,\n                        slug: PropTypes.string.isRequired,\n                    })\n                ).isRequired,\n            }).isRequired,\n        })).isRequired,\n    linkPrefix: PropTypes.string,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Box } from '../common'\n\nconst IntegrationBox = ({ post, hit, section }) => {\n    let hitOnCurrentSite = false\n\n    // The Algolia app now contains indexes from Docs as well as ghost.org.\n    // We therefore send absolute URLs now to Algolia, but need to strip them\n    // out again if the search result is on the current site, so we can determine\n    // if we use Gatsby Link or standard <a> tag.\n    // TODO: remove this again, once the move to G3 is fully completed\n    const siteUrl = `^${process.env.SITE_URL || `https://docs.ghost.org`}`\n    const siteUrlRegex = new RegExp(siteUrl)\n\n    if (hit && hit.url.match(siteUrlRegex)) {\n        hit.url = hit.url.replace(siteUrlRegex, ``)\n        hitOnCurrentSite = true\n    }\n    const url = post ? `/${section}/${post.slug}/` : hit.url\n    const title = post ? post.title : hit.title\n    const image = post ? post.feature_image : hit.image\n    const optimisedImg = `https://res.cloudinary.com/tryghost/image/fetch/w_120,h_100,c_fit/${image}`\n\n    return (\n        <>\n            {hitOnCurrentSite ?\n                <Box\n                    to={url}\n                    className=\"flex flex-column justify-center items-center w-100 h30 pa3 tc tdn darkgrey bg-white shadow-2\"\n                    elevation=\"2\"\n                    radius=\"4\"\n                >\n                    <div className=\"flex justify-center items-center h10 w13 mt1\">\n                        <img className=\"w-100 h-100\" style={{ objectFit: `contain` }} src={optimisedImg} alt={title} />\n                    </div>\n                    <div className=\"f8 mt3\">{title}</div>\n                </Box> :\n                <Box\n                    href={url}\n                    className=\"flex flex-column justify-center items-center w-100 h30 pa3 tc tdn darkgrey bg-white shadow-2\"\n                    elevation=\"2\"\n                    radius=\"4\"\n                >\n                    <div className=\"flex justify-center items-center h10 w13 mt1\">\n                        <img className=\"w-100 h-100\" style={{ objectFit: `contain` }} src={optimisedImg} alt={title} />\n                    </div>\n                    <div className=\"f8 mt3\">{title}</div>\n                </Box>\n            }\n        </>\n    )\n}\n\nIntegrationBox.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        slug: PropTypes.string,\n    }),\n    hit: PropTypes.shape({\n        url: PropTypes.string,\n        title: PropTypes.string,\n        image: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n}\n\nexport default IntegrationBox\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\nimport { addAbsolutePositions, addQueryID } from '../core/utils';\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     appId=\"latency\"\n *     apiKey=\"6be0576ff61c053d5f9a3225e2a90f76\"\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, this.context);\n\n    if (!results) {\n      return {\n        hits: []\n      };\n    }\n\n    var hitsWithPositions = addAbsolutePositions(results.hits, results.hitsPerPage, results.page);\n    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);\n    return {\n      hits: hitsWithPositionsAndQueryID\n    };\n  },\n\n  /* Hits needs to be considered as a widget to trigger a search if no others widgets are used.\n   * To be considered as a widget you need either getSearchParameters, getMetadata or getTransitionState\n   * See createConnector.js\n   * */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectHits } from 'react-instantsearch-dom'\n\nimport { IntegrationBox } from '../.'\n\nconst IntegrationResults = ({ hits }) => (\n    <div className=\"gh-integrations w-100\">\n        {hits.map(hit => <IntegrationBox key={hit.objectID} hit={hit} section=\"integrations\" />)}\n    </div>\n)\n\nIntegrationResults.propTypes = {\n    hits: PropTypes.arrayOf(\n        PropTypes.shape({\n            objectID: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n}\n\nconst IntegrationResultsList = connectHits(IntegrationResults)\n\nexport default IntegrationResultsList\n","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndexId } from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  return getCurrentRefinementValue(props, searchState, context, id, '', function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n\n    return '';\n  });\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, this.context),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, this.context));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this = this;\n\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      id: id,\n      index: getIndexId(this.context),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(id, \": \").concat(currentRefinement),\n        value: function value(nextState) {\n          return _refine(props, nextState, '', _this.context);\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectSearchBox } from 'react-instantsearch-dom'\n\nimport { Icon } from '../../common'\n\nclass IntegrationSearch extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentInput: this.props.currentRefinement,\n            showResetButton: false,\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.setInput = this.setInput.bind(this)\n        this.resetSearch = this.resetSearch.bind(this)\n        this.toggleResetButton = this.toggleResetButton.bind(this)\n    }\n\n    setInput(e) {\n        this.setState(() => {\n            return { currentInput: e }\n        })\n    }\n\n    toggleResetButton(val) {\n        this.setState(() => {\n            return { showResetButton: val }\n        })\n    }\n\n    resetSearch() {\n        this.props.searchActive(false)\n        this.toggleResetButton(false)\n        this.props.refine()\n\n        this.setState(() => {\n            return { currentInput: `` }\n        })\n    }\n\n    handleChange(e) {\n        this.setInput(e.target.value)\n\n        if (!e.target.value) {\n            // input field is empty, stop what we're doing\n            return this.resetSearch()\n        }\n\n        // Tell parent component, that the search is active now\n        this.props.searchActive(true)\n        this.toggleResetButton(true)\n\n        return this.props.refine(e.target.value)\n    }\n\n    render() {\n        return (\n            <div className=\"relative mt8 mw-s center\">\n                <label htmlFor=\"integrationsearch\" className=\"clip\">Search</label>\n                <Icon name=\"search\" className=\"fill-lightgrey w5 h-auto absolute top-4 left-4\" />\n                <input\n                    id=\"integrationsearch\"\n                    name=\"integrationsearch\"\n                    className=\"input-reset form-text pa4 pl10 pr8 w-100 f6 br-pill ba b--transparent bg-white shadow-2 whitney middarkgrey dark-placeholder\"\n                    type=\"text\"\n                    placeholder=\"Search integrations...\"\n                    autoComplete=\"off\"\n                    value={this.state.currentInput}\n                    onChange={this.handleChange}\n                />\n                {this.state.showResetButton ?\n                    <button\n                        className=\"absolute top-0 right-0 bottom-0 pa0 pr2 b--transparent flex justify-center items-center bg-transparent\"\n                        onClick={this.resetSearch}\n                    >\n                        <Icon name=\"close\" className=\"w4 h4 pa2 fill-midgrey bg-white br-100 pointer dim\" />\n                    </button>\n                    : null\n                }\n            </div>\n        )\n    }\n}\n\nIntegrationSearch.propTypes = {\n    searchActive: PropTypes.func.isRequired,\n    currentRefinement: PropTypes.string,\n    refine: PropTypes.func,\n}\n\n// `IntegrationSearchBox` renders a `<IntegrationSearch>` widget that is connected to\n// the <InstantSearch> state, providing it with `currentRefinement` and `refine` props for\n// reading and manipulating the current query of the search.\nconst IntegrationSearchBox = connectSearchBox(IntegrationSearch)\n\nexport default IntegrationSearchBox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Index } from 'react-instantsearch-dom'\n\nconst IntegrationIndex = ({ children }) => (<Index indexName=\"integration\">{children}</Index>)\n\nIntegrationIndex.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default IntegrationIndex\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, StaticQuery, graphql } from 'gatsby'\n\nimport { getTagsforPostCollection } from '../../utils/getTagsforPostCollection'\n\nconst IntegrationsTagList = ({ location, searchActive, data }) => {\n    // When the search is active, we set the \"All integrations\" link as active and\n    // overwrite the real active link as long as the search is active\n    const activeLocation = searchActive ? `/integrations/` : location.pathname\n    const tags = getTagsforPostCollection(data.allGhostPost.edges, `integrations`)\n\n    // Add a default tag for \"All Integrations\" at first place, which\n    // links back to the general integrations page\n    tags.unshift({\n        name: `All Integrations`,\n        slug: `all-integrations`,\n        link: `/integrations/`,\n    })\n\n    return (\n        <>\n            <h3 className=\"ma0 mb2\" data-cy=\"filter\">Filter by</h3>\n            {tags.map((tag, i) => {\n                const dynamicClass = activeLocation === tag.link ? `blue fw6` : `midgrey`\n\n                return (\n                    <Link\n                        to={tag.link}\n                        className={`${dynamicClass} link pa2 pl0`}\n                        key={i}\n                        data-cy={`${tag.slug}-filter`}\n                    >\n                        {tag.name}\n                    </Link>\n                )\n            })}\n        </>\n    )\n}\n\nIntegrationsTagList.propTypes = {\n    location: PropTypes.object.isRequired,\n    searchActive: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.shape({\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    post: PropTypes.shape({\n                        tag: PropTypes.arrayOf(\n                            PropTypes.shape({\n                                name: PropTypes.string,\n                                slug: PropTypes.string,\n                            })\n                        ),\n                    }),\n                }).isRequired,\n            ).isRequired,\n        }).isRequired,\n    }).isRequired,\n}\n\nconst IntegrationTagsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostIntegrationsTagsQuery {\n                allGhostPost(\n                    sort: { order: ASC, fields: [published_at] },\n                    limit: 100,\n                    filter: {tags: {elemMatch: {slug: {eq: \"hash-integration\"}}}}\n                ) {\n                edges {\n                    node {\n                    ...GhostTagListFields\n                    }\n                }\n                }\n            }\n        `}\n        render={data => <IntegrationsTagList data={data} {...props} />}\n    />\n)\nexport default IntegrationTagsQuery\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport { Layout } from '../common/layout'\nimport { NavBar } from '../common/'\nimport IntegrationBox from \"./IntegrationBox\"\nimport { Spirit } from '../../styles/spirit-styles'\nimport { IntegrationIndex, IntegrationSearchBox, IntegrationResults } from './integration-search'\nimport IntegrationsTagList from './IntegrationsTagList'\n\nclass IntegrationsContent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            posts: this.props.posts,\n            activeSorting: `date`,\n            searchActive: false,\n        }\n\n        this.searchSwitch = this.searchSwitch.bind(this)\n    }\n\n    searchSwitch(val) {\n        // a passed argument needs to win over the toggle\n        this.setState((state) => {\n            return {\n                searchActive: val ? val : !state.searchActive,\n            }\n        })\n    }\n\n    sortBy(field) {\n        let firstSortField\n        let secondSortField\n\n        switch (field) {\n        case `date`:\n            firstSortField = `node.published_at`\n            secondSortField = `node.title`\n            this.setState(() => {\n                return { activeSorting: `date` }\n            })\n            break\n        case `title`:\n            firstSortField = `node.title`\n            secondSortField = `node.published_at`\n            this.setState(() => {\n                return { activeSorting: `title` }\n            })\n            break\n        }\n\n        const sortedPosts = _.sortBy(this.state.posts, [firstSortField, secondSortField])\n\n        this.setState(() => {\n            return { posts: sortedPosts }\n        })\n    }\n\n    render() {\n        const { posts } = this.state\n\n        return (\n            <>\n                <Layout\n                    headerDividerStyle=\"shadow\"\n                    header={\n                        <div className=\"bg-integrations-header-image\">\n                            <div className=\"bg-integrations-header-cover\">\n                                <header className=\"top-0 left-0 right-0 z-9999\">\n                                    <NavBar theme=\"light\" />\n                                </header>\n                                <div className=\"pa-vw4 tc white\">\n                                    <h1 className={`${Spirit.sectionHeading} gh-integration-header-shadow`}>Ghost Integrations</h1>\n                                    <p className={ Spirit.sectionSubHeading }>All your favourite apps and tools, integrated with Ghost</p>\n                                    <IntegrationSearchBox searchActive={this.searchSwitch} />\n                                </div>\n                            </div>\n                        </div>\n                    }\n                >\n                    <IntegrationIndex>\n                        <div className={Spirit.page.xl + `pt10`}>\n                            <div className=\"flex items-start br4\">\n                                <div className=\"gh-integration-sidebar flex-shrink-0 w50 mr5 dn db-ns\">\n                                    <div className=\"flex flex-column mb6\" data-cy=\"sort\">\n                                        <h3 className=\"ma0 mb2\">Sort by</h3>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `date` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `date`)}>Most popular</a>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `title` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `title`)}>A – Z</a>\n                                    </div>\n                                    <div className=\"flex flex-column mb6\">\n                                        <IntegrationsTagList\n                                            location={this.props.location}\n                                            searchActive={this.state.searchActive}\n                                        />\n                                    </div>\n                                </div>\n                                {this.state.searchActive ?\n                                    <IntegrationResults /> :\n                                    <>\n                                        <div className=\"gh-integrations w-100\">\n                                            {posts.map(({ node }) => (\n                                                <IntegrationBox key={node.id} post={node} section=\"integrations\" />\n                                            ))}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </IntegrationIndex>\n                </Layout>\n            </>\n        )\n    }\n}\n\nIntegrationsContent.propTypes = {\n    posts: PropTypes.array.isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default IntegrationsContent\n","export { default as IntegrationBox } from './IntegrationBox'\nexport { default as IntegrationsContent } from './IntegrationsContent'\nexport { default as IntegrationsTagList } from './IntegrationsTagList'\n"],"sourceRoot":""}